# src/pyselect/networks.py
"""Networks based on layers specification."""
import torch.nn as nn

from pyselect.layers import HadamardLayer
from pyselect.layers import RandomFourierFeaturesLayer


class RandomFourierFeaturesNet(nn.Module):
    """Linear one-layered neural network coupled with Random Fourier Features layer.

    Attributes:
        in_features: Number of features in the input tensor.
        out_features: Number of features generated by the Random Fourier Features layer. It is called **R** in the original Brecht (2007) article.
        sampler: Callable that samples from the chosen distribution. Determines the kernel the RFF method is aproximating.
    """

    # TODO: final layer can be set to a different architecture.
    def __init__(self, in_features: int, out_features: int, sampler):
        """Constructor of the Random Fourier Features Network."""
        super(RandomFourierFeaturesNet, self).__init__()
        self.rff_net = nn.Sequential(
            HadamardLayer(in_features),
            RandomFourierFeaturesLayer(in_features, out_features, sampler),
            nn.Linear(out_features, 1, bias=True),
        )

    def forward(self, x):
        """Perform a forward pass on the complete network."""
        output = self.rff_net(x)
        return output
